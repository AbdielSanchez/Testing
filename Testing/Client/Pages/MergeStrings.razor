@page "/mergeStrings"
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons;
@using Testing.Shared;

<h3>MergeStrings</h3>

<div class="control-section col-lg-12">
    <div class="content wrapper">
        @if (string.IsNullOrEmpty(Message))
        {
            <EditForm Model="@annotation" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <div class="textbox">
                        <label for="Name" style="padding: 20px 0 5px 0">Name</label>
                        <SfTextBox id='textbox' @bind-Value="@annotation.Name" Placeholder="Enter a Name"></SfTextBox>
                        <ValidationMessage For="@(() => annotation.Name)" />
                    </div>
                    <div class="multilinetextbox">
                        <label for="Address" style="padding: 10px 0 5px 0">Address</label>
                        <SfTextBox @bind-Value="@annotation.Address" Multiline="true" Placeholder="Enter an Address"></SfTextBox>
                        <ValidationMessage For="@(() => annotation.Address)" />
                    </div>
                </div>
                <div class="sfButton">
                    <SfButton type="submit" IsPrimary="true">Submit</SfButton>
                </div>
            </EditForm>
        }
        else
        {
            <div class="alert alert-success">
                @Message
            </div>
        }
    </div>
</div>


@code {

    private string s1;
    private string s2;
    private string b;

    private string Message = string.Empty;
    private Annotation annotation = new Annotation();
    private void OnValidSubmit()
    {
        s1 = annotation.Name;
        s2 = annotation.Address;

        Merge();
        StateHasChanged();
    }

    private void Merge()
    {
        var n = s1.Length < s2.Length ? s2.Length * 2 : s1.Length * 2;

        List<char> s1chars = s1.ToList();
        List<char> s2chars = s2.ToList();
        List<char> a = new List<char>();

        for (int i = 0; i < n; i++)
        {
            if(s1chars.Count < 1 || s2chars.Count < 1)
            {
                string tailstring = new String(s1chars.ToArray()) + new String(s2chars.ToArray());
                annotation.Name += tailstring;
                b = new String(a.ToArray());
                annotation.Address = b + tailstring;
                break;
            }
            var minchar = s1chars[0] < s2chars[0] ? s1chars[0] : s2chars[0];
            a.Add(minchar);
            annotation.Name += " " + a[i].ToString();
            if (s1chars[0] < s2chars[0])
            {
                s1chars.RemoveAt(0);
            }
            else
            {
                s2chars.RemoveAt(0);
            }
        }
    }

    private void OnInvalidSubmit()
    {
        Message = string.Empty;
    }
}
